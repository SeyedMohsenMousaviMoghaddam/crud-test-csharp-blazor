@page "/customers/{Page}"
@using Mc2.CrudTest.Presentation.Shared.Customers
@using Mc2.CrudTest.Presentation.Client.Services.Customers
@inject ICustomerService CustomerService
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Mc2.CrudTest.Presentation.Client.Shared.PageHistoryState PageHistoryState

<h1>People</h1>
<br/>

<div class="row mb-3">
    <div class="col-md-7">
        <NavLink href="/customers/createcustomer" class="btn btn-sm btn-success mb-2">Add Customer</NavLink>
    </div>
    <div class="input-group col-md-5 text-md-right">
        <input name="CustomerSearchInput" type="text" class="form-control" placeholder="Customer Name" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
        <div class="input-group-btn">
            <button name="CustomerSearchButton" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="CustomerSearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (people == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:25%">First Name</th>
                <th style="width:25%">Last Name</th>
                <th style="width:15%">Gender</th>
                <th style="width:30%">Phone Number</th>
                <th style="width:5%"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in people.Results)
            {
                <tr>
                    <td>@customer.Firstname</td>
                    <td>@customer.Lastname</td>
                    <td>@customer.Gender</td>
                    <td>@customer.PhoneNumber</td>
                    <td style="white-space: nowrap">
                        <NavLink href="@($"/customers/viewcustomer/{customer.Id}")" class="oi oi-eye text-primary mr-3 nounderline"></NavLink>
                        <NavLink href="@($"/customers/updatecustomer/{customer.Id}")" class="oi oi-pencil text-warning mr-2 nounderline"></NavLink>

                            @if (customer.IsDeleted)
                            {
                                <button @onclick="@(() => DeleteCustomer(customer))" disabled="@customer.IsDeleted" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                        <span class="spinner-border spinner-border-sm"></span>
                                    </button>
                            }
                            else
                            {
                                <button @onclick="@(() => DeleteCustomer(customer))" disabled="@customer.IsDeleted" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                        <span></span>
                                    </button>
                            }
                    </td>
                </tr> 
            }
        </tbody>
    </table>
    <Pager Result=@people PageChanged=PagerPageChanged />
}

@code {
    [Parameter]
    public string Page { get; set;} = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;
    protected PagedResult<Customer> people;
    
    
    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        people = await CustomerService.GetPeople(null,Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            people = await CustomerService.GetPeople(null,Page);
            return;
        }
        people = await CustomerService.GetPeople(SearchTerm,Page);
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        people = await CustomerService.GetPeople(SearchTerm,Page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/customers/" + page);
        PageHistoryState.AddPageToHistory(UriHelper.Uri);
    }

    private async void DeleteCustomer(Customer _customer)
    {
        var customer = _customer;
        customer.IsDeleted = true;
        await CustomerService.DeleteCustomer(customer.Id);
        people = await CustomerService.GetPeople(null,Page);
        StateHasChanged();
    }
}